{"pages":[],"posts":[{"title":"icarus配置","text":"Version of the Icarus theme that is currently usedversion: 2.3.0 你的网站图标，可以搜索在线图标制作，并将其放在images文件夹中favicon: /images/favicons.ico Path or URL to RSS atom.xmlrss: /atom.xml 显示在导航栏左侧的网站logo，同样可以自己制作logo: /images/gen.svg Open Graph metadatahttps://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID fb_app_id: # Facebook Admin ID fb_admins: # Twitter ID twitter_id: # Twitter site twitter_site: # Google+ profile link google_plus: 导航栏navbar: #菜单（显示名称：对应文件夹） menu: 主页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about # 导航栏右侧图标链接 links: My GitHub: icon: fab fa-github url: ‘你的gityhub地址’ Footer section link settingsfooter: # 页脚图标链接 links: Creative Commons: icon: fab fa-creative-commons url: ‘https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: ‘https://creativecommons.org/licenses/by/4.0/' Download on GitHub: icon: fab fa-github url: ‘http://github.com/ppoffice/hexo-theme-icarus' 文章显示设置article: # Code highlight theme # https://github.com/highlightjs/highlight.js/tree/master/src/styles #代码主题atom-one-light亮色，atom-one-dark暗色 highlight: atom-one-dark # 是否显示文章主图 thumbnail: true # 是否显示估算阅读时间 readtime: true 搜索插件设置http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Search-Pluginssearch: # Name of the search plugin type: insight 评论插件设置http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Comment-Pluginscomment: #可选valine，disqus（科学上网）等 # Name of the comment plugin #type: valine #app_id: 不为空 #app_key: 不为空 #notify: true #verify: true #placeholder: type: disqus shortname: 不能为空 打赏功能http://ppoffice.github.io/hexo-theme-icarus/categories/Donation/donate: - # 阿里巴巴支付宝 type: alipay # 二维码图片 qrcode: ‘/images/honbao.PNG’ - # 微信 type: wechat # 二维码图片 qrcode: ‘/images/yjtp.png’ - 分享插件设置http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Share-Pluginsshare: # 插件类型，有多种，可选，自行百度 type: sharejs Sidebar settings.Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # 左侧边栏设置 left: # 是否不随页面滚动 # http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false # 右侧边栏设置 right: # 是否不随页面滚动 # http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false 边栏小部件设置http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # 个人信息 type: profile # 部件位置（左） position: left # 作者名（字符串） author: 飞鱼 # 作者身份描述（字符串） author_title: Student # 作者当前居住地 location: China,Fujian # 头像（可用本地图片或网络图片链接） avatar: ‘/images/ava.png’ # Email address for the Gravatar to be shown in the profile widget gravatar: # 关注我的链接，可设为你的GitHub主页 follow_link: ‘https://github.com/yourname' # 个人介绍部件底部图标社交链接 social_links: Github: icon: fab fa-github url: ‘https://github.com/yourname' Facebook: icon: fab fa-facebook url: ‘https://facebook.com' Twitter: icon: fab fa-twitter url: ‘https://twitter.com/yourname' RSS: icon: fas fa-rss url: / - # Widget name type: toc # Where should the widget be placed, left or right position: left - # 分类 type: category # 位置指定 position: left - # 标签云 type: tagcloud # 位置 position: right - # 近期文章 type: recent_posts # 位置 position: left - # 归档 type: archive # Where should the widget be placed, left or right position: right - # 标签 type: tag # Where should the widget be placed, left or right position: right - # 外部链接 type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Google: ‘https://google.com' Baidu: ‘https://baidu.com'","link":"/2020/04/03/Icarus/"},{"title":"hexo new","text":"hexo new 创建文件如果带有中文名称 文件名称中文部分 会乱码 文章标题取决于title 暂时不清楚原因前 new 都以英文命名 一开始不使用 hexo new 创建文件 直接往_posts 里扔md文件 解析后无法显示跟文件名称带有中文名称有关系 如果名称为英文 可以直接扔","link":"/2020/04/03/hexo%20new/"},{"title":"icarus配置2","text":"修改navbar导航栏左边的logo配置方式因为不会设计Logo, 就改成”icon+文字”的方式, 并加入logo.img配置项 themes/hexo-theme-icarus/layout/common/navbar.ejs2. 修改navbar导航栏右边的搜索功能原版2.3.0只有一个小的搜索icon, 加入搜索输入框并嵌入搜索icon themes/hexo-theme-icarus/layout/common/navbar.ejsthemes/hexo-theme-icarus/source/css/style.styl3. 修改个人信息页中的几个links原版是通过socialLinks动态配置的, 不支持微信, 码云, 微博这几个常用, 这里为了方便我使用+标签写死 themes/hexo-theme-icarus/layout/widget/profile.ejs4. 友情链接标题前加入icon, 为了好看themes/hexo-theme-icarus/layout/widget/links.ejs5. 修改文章页(index页和post页)的文章时间加入判断, 如果是列表页显示例如几月前, 文章页显示具体日期, 例如2018-12-22 themes/hexo-theme-icarus/layout/common/article.ejs6. 修改文章详情页面不显示文章图片thumbnail在阅读文章时感觉有点花, 默认是index页和post页都会显示 themes/hexo-theme-icarus/layout/common/article.ejs7. 修改首页文章列表摘要信息不显示样式去掉Markdown生成的html标签, 类似简书上的文章排版, 整洁一点 themes/hexo-theme-icarus/layout/common/article.ejs8. 修改文章页面布局原版的主页和文章页都使用三栏布局, 在文章页阅读会显得内容很窄, 尤其是代码部分, 需要左右滚动, 故修改文章页为两栏布局 themes/hexo-theme-icarus/includes/helpers/layout.jsthemes/hexo-theme-icarus/layout/common/widget.ejsthemes/hexo-theme-icarus/layout/layout.ejsthemes/hexo-theme-icarus/source/css/style.styl9. 目录的开启方式改为默认就开启文章目录这样可以不用每个md文件都去写toc: true themes/hexo-theme-icarus/includes/helpers/config.js10. 修改开启目录后的显示问题默认目录在滚动文章时如果太长会显示不全, 所以增加目录粘性布局 themes/hexo-theme-icarus/layout/widget/toc.ejs11. 文章页增加版权声明themes/hexo-theme-icarus/layout/common/article.ejsthemes/hexo-theme-icarus/source/css/style.styl12. 修改底部footer的显示信息themes/hexo-theme-icarus/layout/common/footer.ejs配合gulp压缩主要是为了在hexo generate到public目录后, 压缩html, css, js等资源 经过压缩, 我的public目录大小从8MB降到5MB, 还是可以的 第一次用压缩工具, 记录下gulp的安装和使用, 及配合hexo icarus主题进行压缩时的几个问题 安装npm install gulp –savenpm install gulp -g还需要以下模块 gulp-htmlclean: 清理htmlgulp-htmlmin: 压缩htmlgulp-minify-css: 压缩cssgulp-uglify: 混淆jsgulp-imagemin: 压缩图片执行安装命令 npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin –save最好在安装一个可以打印错误日志的工具, 之后会用到: npm install –save-dev gulp-util建立任务在hexo根目录建立文件gulpfile.js, 内容如下: var gulp = require(‘gulp’);var minifycss = require(‘gulp-minify-css’);var uglify = require(‘gulp-uglify’);var htmlmin = require(‘gulp-htmlmin’);var htmlclean = require(‘gulp-htmlclean’);var imagemin = require(‘gulp-imagemin’);var gutil = require(‘gulp-util’); // 压缩htmlgulp.task(‘minify-html’, function() { return gulp.src(‘./public//*.html’) .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest(‘./public’))});// 压缩htmlgulp.task(‘minify-xml’, function() { return gulp.src(‘./public//.xml’) .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest(‘./public’))});// 压缩cssgulp.task(‘minify-css’, function() { return gulp.src(‘./public/**/.css’) .pipe(minifycss({ compatibility: ‘ie8’ })) .pipe(gulp.dest(‘./public’));});// 压缩jsgulp.task(‘minify-js’, function() { return gulp.src(‘./public/js/*/.js’) .pipe(uglify()) .pipe(gulp.dest(‘./public’));}); // 压缩jsgulp.task(‘minify-js’, function() { return gulp.src(‘./public/js/*/.js’) .pipe(uglify()) .on(‘error’, function (err) { gutil.log(gutil.colors.red(‘[Error]’), err.toString()); }) .pipe(gulp.dest(‘./public’));}); // 压缩图片gulp.task(‘minify-images’, function() { return gulp.src(‘./public/img/*/.*’) .pipe(imagemin( [imagemin.gifsicle({‘optimizationLevel’: 3}), imagemin.jpegtran({‘progressive’: true}), imagemin.optipng({‘optimizationLevel’: 7}), imagemin.svgo()], {‘verbose’: true})) .pipe(gulp.dest(‘./public/img’))});// 默认任务gulp.task(‘default’, [ ‘minify-html’,’minify-xml’,’minify-css’,’minify-js’,’minify-images’]);问题一: gulp版本在Hexo根目录执行gulp, 错误如下: AssertionError: Task function must be specified。版本问题导致的, 可以查看下gulp版本: gulp -v 修改package.json中的gulp版本为3.x, 例如: “dependencies”: { “gulp”: “^3.9.1”, // …}然后重新安装gulp: npm install gulp 问题二: icarus主题中的js语法问题接下来gulp可能会发生如下错误: GulpUglifyError: unable to minify JavaScript原因是javascirpt语法问题，在es5环境里使用了es6、es7语法 因为上面安装部分和gulpfile.js中已经添加了错误打印, 可以看到具体的错误信息 我修改了如下js文件: themes/hexo-theme-icarus/source/js/back-to-top.jsthemes/hexo-theme-icarus/source/js/clipboard.jsthemes/hexo-theme-icarus/source/js/main.js 作者：i蝸居年華_谢谢谢链接：https://www.jianshu.com/p/815adbb220a3来源：简书","link":"/2020/04/03/icarus2/"},{"title":"HexoEditor安装错误","text":"No matching version found for js-sequence-diagrams@^1000000.0.61[package.json] js-sequence-diagrams changed the way of adding version number console “js-sequence-diagrams”: “^1000000.0.6” 改成 “js-sequence-diagrams”: “0.0.1-security”, https://github.com/zhuzhuyule/HexoEditor/issues/69","link":"/2020/04/07/js-sequence-diagrams@%5E1000000.0.6/"},{"title":"python什么时候会被取代","text":"Python经过了几十年的努力才得到了编程社区的赏识。自2010年以来，Python得到了蓬勃发展，并最终超越了C、C#、Java和JavaScript。 但是，这种趋势将持续到什么时候？何时Python会被其他语言取代？被取代的原因又是什么呢？ 对于Python被淘汰出局的确切日期有很多猜测，它可能会像科幻小说一样成为过去。在本文中，我将讨论促成Python大面积普及的优势，以及将来导致它陨落的弱点。 \\促成Python流行的因素** 通过Stack Overflow发展趋势就可以洞悉Python的成功。考虑到StackOverflow的规模，我们可以认为这是衡量编程语言流行度的一个很好的指标。 尽管在过去几年中，R语言的发展一直处于平稳状态，很多其他编程语言已开始稳步下降，但Python的增长似乎势不可挡。在所有StackOverflow的问题中，带有“python”标签的占到了14%，而且这种趋势还在上升。其中的原因有很多。 \\Python是一种古老的语言** Python于90年代问世。这不仅意味着Python有足够的时间成长，而且还拥有了一个庞大的支持社区。 因此，如果你在使用Python进行编程时遇到任何问题，只需上网搜索就可以得到答案。因为总是会有人在这之前就遇到了这个问题，并为此撰写了一些有用的资料。 \\对初学者很友好** Python对初学者友好的原因不仅仅是因为它已经存在了数十年，予以程序员足够的时间编写出色的教程，而且还因为Python的语法非常易于理解。 首先，无需指定数据类型。你只需声明一个变量即可，Python会根据上下文判断这个变量是整数、浮点数、布尔值还是其他类型。对于初学者来说，这是一个巨大的优势。如果你有过使用C++编程的经历，那么就会懂得只因为你错把浮点数定义成了整数，就导致程序无法通过编译有多么难受了。 此外，比较Python和C++代码，不难发现Python有多么易于理解。尽管C++在设计时考虑到了英语，但与Python代码相比，阅读C++的代码还是相当坎坷。 \\用途广泛** 由于Python已经存在了很长时间，因此开发人员为之开发出了各色的软件包。如今，无论遇到什么问题，你都可以找到相关的软件包。 想处理数字、向量和矩阵？那么就来试试 NumPy 吧。 想进行技术和工程的计算？那么就来试试 SciPy 吧。 想操作和分析大数据？那么就来试试 Pandas 吧。 想学习人工智能？为什么不试试 Scikit-Learn 呢。 无论你需要进行哪方面的计算任务，都可以找到相关的Python软件包。由于过去几年中机器学习的迅猛发展，Python已经站在了时代发展的最前沿。 \\Python的缺点，这些缺点是否致命？** 通过上述讨论，你可以想象在很长一段时间内Python的发展都势不可挡。然而，Python也逃不开一切技术的命运，它也有自己的弱点。接下来，我将逐个介绍Python的重大缺陷，并评估这些缺陷是否致命。 \\速度** Python很慢，非常非常慢。平均而言，使用Python完成某个任务所需的时间是使用任何其他语言的2–10倍。 其中的原因有很多。其中之一是因为Python是动态类型的，别忘了你不需要像其他语言一样指定数据类型。这意味着内存的耗费非常大，因为在任何情况下程序都需要为每个变量保留足够的空间。而巨大的内存使用量必然需要耗费大量的计算时间。 另一个原因是Python一次只能执行一个任务。这是灵活的数据类型带来的结果，Python需要确保每个变量只有一个数据类型，而并行进程可能会在这一点上出问题。 相比之下，普通的Web浏览器一次可以运行十几个不同的线程。当然其中还涉及别的因素。 但最终所有的速度问题都不打紧。因为电脑和服务器的价格越来越低，我们谈论的也只不过是几分之一秒的问题。最终用户并不真正在乎他们的应用加载需要0.001还是0.01秒。 \\范围** 最初，Python是动态作用域。这基本上意味着，为了评估表达式，编译器首先需要搜索当前块，然后依次搜索所有调用函数。 动态作用域的问题在于，每个表达式都需要在所有上下文中进行测试，这很繁琐。这就是为什么大多数现代编程语言都使用静态作用域。 Python曾尝试过渡到静态作用域，但搞砸了。通常，内部作用域（例如函数中的函数）能够查看和更改外部作用域。在Python中，内部作用域只能看到外部作用域，但不能更改。因此引发了很多混乱。 \\Lambdas** 尽管Python非常灵活，但Lambdas的使用还是有一定的局限性。Lambda只能是Python中的表达式，而不能是语句。 另一方面，变量声明和语句始终是语句，这意味着它们不能使用Lambda。 在Python中，表达式和语句之间的区别相当随意，这是其他编程语言都没有的问题。 \\空白** 在Python中，你需要使用空白和缩进来表示不同级别的代码。这种格式具有视觉吸引力，而且易于理解。 其他编程语言（例如C++）都需要依赖大括号和分号。尽管这可能在视觉上没有那么强的吸引力，而且对初学者不够友好，但可以提高代码的可维护性。在大型项目中，这种方式更为妥当。 Haskell等新兴的编程语言解决了这个问题：它们依赖空白，但同时也为那些希望不用空白的人提供了另一种语法。 \\移动开发** 我们目睹了从台式机向智能手机的转变，很明显，我们需要强大的语言来构建移动软件。 然而，使用Python开发的移动应用并不多。这并不意味着Python无法开发移动应用，你可以试试看一个名为 Kivy 的 Python 包。 但是，Python的设计被没有考虑到移动设备。因此，即使Python可以应付基本的任务，但我们最好还是选择专门为移动应用程序开发而创建的语言。广泛用于移动编程的语言包括：React Native、Flutter、Iconic和Cordova。 我们需要明确的是，笔记本电脑和台式计算机已经存在很多年了。然而，由于移动设备的使用已然超越了桌面设备，因此我们肯定地说，学习Python不足以成为经验丰富的全方面开发人员。 \\运行时错误** Python不需要首先编译，然后再执行。相反，它会在每次执行时编译，因此所有编程上的错误都会在运行时显示出来。这会导致性能下降、浪费时间，而且还需要进行大量测试。 对于初学者来说，这未必是坏事，因为测试可以教会他们很多知识。然而，对于经验丰富的开发人员而言，必须使用Python调试复杂的程序很令人头疼。性能欠缺是Python最大的问题。 \\Python什么时候会被取代？** 如今，编程语言市场上涌现了新的竞争力量： Rust提供了与Python相同的安全性——不会意外覆盖任何变量。但是，它通过所有权和借用的概念解决了效率的问题。根据StackOverflow Insights，Rust是近几年最受欢迎的编程语言。 Go 与 Python 一样非常适合初学者。语言本身非常简单，维护代码更加简单。此外，有趣的是，Go开发人员是市场上收入最高的程序员之一。 Julia是一种非常新的语言，可与Python正面竞争。Julia填补了大规模技术计算的空白：以前，人们通常都需要使用Python或Matlab编写代码，然后再使用C++库修补整个程序，因为C++库是大规模必不可少的。如今，人们可以使用Julia，而不必在两种语言之间挣扎。 尽管市场上还有其他语言，但Rust、Go和Julia 可以弥补Python的弱点。所有这些语言在即将到来的技术中都有出色的表现，最典型的就是人工智能。尽管它们的市场份额仍较小，但根据StackOverflow的数据显示，这些语言的发展呈现出明显的上升趋势。 如今，Python无处不在，我们还需要五年甚至更长的时间，才有可能看到Python被新语言所替代。 就目前而言，我们很难判断哪种语言有可能替代Python，是Rust、Go、Julia抑或是其他的新语言。但鉴于Python体系结构中最基本的性能问题，其终将难逃被人替代的命运。 原文： https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66 本文为 CSDN 翻译，转载请注明来源出处","link":"/2020/04/07/pythonisexit/"},{"title":"微信小程序设置二维码","text":"step1：开启扫描二维码打开小程序登录小程序后台，进入“开发-开发设置-扫普通链接二维码打开小程序”，开启功能后即可配置二维码规则。 step2：配置二维码1、填写二维码二维码规则： 二维码规则的域名须通过ICP备案的验证。 支持http、https、ftp开头的链接（如：http://wx.qq.com、https://wx.qq.com/mp/、https://wx.qq.com/mp?id=123） 一个小程序帐号可配置不多于10个二维码前缀规则。 2、校验文件现在是通过把微信给的连接加到路由地址上去验证 3、小程序功能页面小程序功能页面可打开指定页面，扫描二维码可打开对应页面。 step3：扫描二维码打开小程序配置二维码时可配置测试链接，利用第三方二维码生成工具，使用测试链接生成二维码，利用微信“扫一扫”或微信内长按识别二维码跳转小程序。 链接?后为参数部分，可在onLoad事件中提取q参数并自行decodeURIComponent一次，即可获取原二维码的完整内容。 12345678910111213141516171819202122onLoad: function (options) { if (options.q) { let queryAll = decodeURIComponent(options.q); let id = gup('id', queryAll); //console.log(queryAll); //console.log(id); } },/** * 获取URL中某个字符串字段 * gup('id', 'https://www.lubanso.com/wx/home/?id=bHViYW5zb7W7DJI=&amp;jhkfdhkjfda') * //===&gt; bHViYW5zb7W7DJI= */function gup(name, url) { if (!url) url = location.href; name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\"); var regexS = \"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(url); return results == null ? null : results[1];} 三、注意事项 开放范围：企业、媒体、政府及其他组织类型小程序。 对于普通链接二维码，目前支持使用微信“扫一扫”或微信内长按识别二维码跳转小程序。 上线时需要配置https开头的链接，并且配置指定域名。 上线时，需要发布二维码规则才可使用。 填写符合二维码前缀匹配规则的二维码完整链接用于测试，如包括参数，请完整填写。 配置温馨规则的时候比如https://s.huiqu.com/tw 会匹配到https://s.huiqu.com/tw?id=1","link":"/2020/04/26/qr/"},{"title":"快速创建微信小程序","text":"快速创建小程序微信小程序公众号(服务号)可快速创建小程序 进入公共号后 点击小程序 -小程序管理-快速认证并关联小程序","link":"/2020/04/26/create/"},{"title":"NPM 使用","text":"NPM 使用介绍NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种： 允许用户从NPM服务器下载别人编写的第三方包到本地使用。 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功: 12$ npm -v2.3.0 如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下： 123$ sudo npm install npm -g/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.jsnpm@2.14.2 /usr/local/lib/node_modules/npm 如果是 Window 系统使用以下命令即可： 1npm install npm -g 使用淘宝镜像的命令： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 使用 npm 命令安装模块npm 安装 Node.js 模块语法格式如下： 1$ npm install &lt;Module Name&gt; 以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express: 1$ npm install express 安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘express’) 的方式就好，无需指定第三方包路径。 1var express = require('express'); 全局安装与本地安装npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如 12npm install express # 本地安装npm install express -g # 全局安装 如果出现以下错误： 1npm err! Error: connect ECONNREFUSED 127.0.0.1:8087 解决办法为： 1$ npm config set proxy null 本地安装 \\1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。 \\2. 可以通过 require() 来引入本地安装的包。 全局安装 \\1. 将安装包放在 /usr/local 下或者你 node 的安装目录。 \\2. 可以直接在命令行里使用。 如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。 接下来我们使用全局方式安装 express 1$ npm install express -g 安装过程输出如下内容，第一行输出了模块的版本号及安装位置。 1234567891011121314151617181920212223242526express@4.13.3 node_modules/express├── escape-html@1.0.2├── range-parser@1.0.2├── merge-descriptors@1.0.0├── array-flatten@1.1.1├── cookie@0.1.3├── utils-merge@1.0.0├── parseurl@1.3.0├── cookie-signature@1.0.6├── methods@1.1.1├── fresh@0.3.0├── vary@1.0.1├── path-to-regexp@0.1.7├── content-type@1.0.1├── etag@1.7.0├── serve-static@1.10.0├── content-disposition@0.5.0├── depd@1.0.1├── qs@4.0.0├── finalhandler@0.4.0 (unpipe@1.0.0)├── on-finished@2.3.0 (ee-first@1.1.1)├── proxy-addr@1.0.8 (forwarded@0.1.0, ipaddr.js@1.0.1)├── debug@2.2.0 (ms@0.7.1)├── type-is@1.6.8 (media-typer@0.3.0, mime-types@2.1.6)├── accepts@1.2.12 (negotiator@0.5.3, mime-types@2.1.6)└── send@0.13.0 (destroy@1.0.3, statuses@1.2.1, ms@0.7.1, mime@1.3.4, http-errors@1.3.1) 查看安装信息你可以使用以下命令来查看所有全局安装的模块： 1234567891011$ npm list -g├─┬ cnpm@4.3.2│ ├── auto-correct@1.0.0│ ├── bagpipe@0.3.5│ ├── colors@1.1.2│ ├─┬ commander@2.9.0│ │ └── graceful-readlink@1.0.1│ ├─┬ cross-spawn@0.2.9│ │ └── lru-cache@2.7.3…… 如果要查看某个模块的版本号，可以使用命令如下： 1234$ npm list gruntprojectName@projectVersion /path/to/project/folder└── grunt@0.4.1 使用 package.jsonpackage.json 位于模块的目录下，用于定义包的属性。接下来让我们来看下 express 包的 package.json 文件，位于 node_modules/express/package.json 内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167{ &quot;name&quot;: &quot;express&quot;, &quot;description&quot;: &quot;Fast, unopinionated, minimalist web framework&quot;, &quot;version&quot;: &quot;4.13.3&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;TJ Holowaychuk&quot;, &quot;email&quot;: &quot;tj@vision-media.ca&quot; }, &quot;contributors&quot;: [ { &quot;name&quot;: &quot;Aaron Heckmann&quot;, &quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot; }, { &quot;name&quot;: &quot;Ciaran Jessup&quot;, &quot;email&quot;: &quot;ciaranj@gmail.com&quot; }, { &quot;name&quot;: &quot;Douglas Christopher Wilson&quot;, &quot;email&quot;: &quot;doug@somethingdoug.com&quot; }, { &quot;name&quot;: &quot;Guillermo Rauch&quot;, &quot;email&quot;: &quot;rauchg@gmail.com&quot; }, { &quot;name&quot;: &quot;Jonathan Ong&quot;, &quot;email&quot;: &quot;me@jongleberry.com&quot; }, { &quot;name&quot;: &quot;Roman Shtylman&quot;, &quot;email&quot;: &quot;shtylman+expressjs@gmail.com&quot; }, { &quot;name&quot;: &quot;Young Jae Sim&quot;, &quot;email&quot;: &quot;hanul@hanul.me&quot; } ], &quot;license&quot;: &quot;MIT&quot;, &quot;repository&quot;: { &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;git+https://github.com/strongloop/express.git&quot; }, &quot;homepage&quot;: &quot;http://expressjs.com/&quot;, &quot;keywords&quot;: [ &quot;express&quot;, &quot;framework&quot;, &quot;sinatra&quot;, &quot;web&quot;, &quot;rest&quot;, &quot;restful&quot;, &quot;router&quot;, &quot;app&quot;, &quot;api&quot; ], &quot;dependencies&quot;: { &quot;accepts&quot;: &quot;~1.2.12&quot;, &quot;array-flatten&quot;: &quot;1.1.1&quot;, &quot;content-disposition&quot;: &quot;0.5.0&quot;, &quot;content-type&quot;: &quot;~1.0.1&quot;, &quot;cookie&quot;: &quot;0.1.3&quot;, &quot;cookie-signature&quot;: &quot;1.0.6&quot;, &quot;debug&quot;: &quot;~2.2.0&quot;, &quot;depd&quot;: &quot;~1.0.1&quot;, &quot;escape-html&quot;: &quot;1.0.2&quot;, &quot;etag&quot;: &quot;~1.7.0&quot;, &quot;finalhandler&quot;: &quot;0.4.0&quot;, &quot;fresh&quot;: &quot;0.3.0&quot;, &quot;merge-descriptors&quot;: &quot;1.0.0&quot;, &quot;methods&quot;: &quot;~1.1.1&quot;, &quot;on-finished&quot;: &quot;~2.3.0&quot;, &quot;parseurl&quot;: &quot;~1.3.0&quot;, &quot;path-to-regexp&quot;: &quot;0.1.7&quot;, &quot;proxy-addr&quot;: &quot;~1.0.8&quot;, &quot;qs&quot;: &quot;4.0.0&quot;, &quot;range-parser&quot;: &quot;~1.0.2&quot;, &quot;send&quot;: &quot;0.13.0&quot;, &quot;serve-static&quot;: &quot;~1.10.0&quot;, &quot;type-is&quot;: &quot;~1.6.6&quot;, &quot;utils-merge&quot;: &quot;1.0.0&quot;, &quot;vary&quot;: &quot;~1.0.1&quot; }, &quot;devDependencies&quot;: { &quot;after&quot;: &quot;0.8.1&quot;, &quot;ejs&quot;: &quot;2.3.3&quot;, &quot;istanbul&quot;: &quot;0.3.17&quot;, &quot;marked&quot;: &quot;0.3.5&quot;, &quot;mocha&quot;: &quot;2.2.5&quot;, &quot;should&quot;: &quot;7.0.2&quot;, &quot;supertest&quot;: &quot;1.0.1&quot;, &quot;body-parser&quot;: &quot;~1.13.3&quot;, &quot;connect-redis&quot;: &quot;~2.4.1&quot;, &quot;cookie-parser&quot;: &quot;~1.3.5&quot;, &quot;cookie-session&quot;: &quot;~1.2.0&quot;, &quot;express-session&quot;: &quot;~1.11.3&quot;, &quot;jade&quot;: &quot;~1.11.0&quot;, &quot;method-override&quot;: &quot;~2.3.5&quot;, &quot;morgan&quot;: &quot;~1.6.1&quot;, &quot;multiparty&quot;: &quot;~4.1.2&quot;, &quot;vhost&quot;: &quot;~3.0.1&quot; }, &quot;engines&quot;: { &quot;node&quot;: &quot;&gt;= 0.10.0&quot; }, &quot;files&quot;: [ &quot;LICENSE&quot;, &quot;History.md&quot;, &quot;Readme.md&quot;, &quot;index.js&quot;, &quot;lib/&quot; ], &quot;scripts&quot;: { &quot;test&quot;: &quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;, &quot;test-ci&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;, &quot;test-cov&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;, &quot;test-tap&quot;: &quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot; }, &quot;gitHead&quot;: &quot;ef7ad681b245fba023843ce94f6bcb8e275bbb8e&quot;, &quot;bugs&quot;: { &quot;url&quot;: &quot;https://github.com/strongloop/express/issues&quot; }, &quot;_id&quot;: &quot;express@4.13.3&quot;, &quot;_shasum&quot;: &quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;, &quot;_from&quot;: &quot;express@*&quot;, &quot;_npmVersion&quot;: &quot;1.4.28&quot;, &quot;_npmUser&quot;: { &quot;name&quot;: &quot;dougwilson&quot;, &quot;email&quot;: &quot;doug@somethingdoug.com&quot; }, &quot;maintainers&quot;: [ { &quot;name&quot;: &quot;tjholowaychuk&quot;, &quot;email&quot;: &quot;tj@vision-media.ca&quot; }, { &quot;name&quot;: &quot;jongleberry&quot;, &quot;email&quot;: &quot;jonathanrichardong@gmail.com&quot; }, { &quot;name&quot;: &quot;dougwilson&quot;, &quot;email&quot;: &quot;doug@somethingdoug.com&quot; }, { &quot;name&quot;: &quot;rfeng&quot;, &quot;email&quot;: &quot;enjoyjava@gmail.com&quot; }, { &quot;name&quot;: &quot;aredridel&quot;, &quot;email&quot;: &quot;aredridel@dinhe.net&quot; }, { &quot;name&quot;: &quot;strongloop&quot;, &quot;email&quot;: &quot;callback@strongloop.com&quot; }, { &quot;name&quot;: &quot;defunctzombie&quot;, &quot;email&quot;: &quot;shtylman@gmail.com&quot; } ], &quot;dist&quot;: { &quot;shasum&quot;: &quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;, &quot;tarball&quot;: &quot;http://registry.npmjs.org/express/-/express-4.13.3.tgz&quot; }, &quot;directories&quot;: {}, &quot;_resolved&quot;: &quot;https://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;, &quot;readme&quot;: &quot;ERROR: No README data found!&quot;} Package.json 属性说明 name - 包名。 version - 包的版本号。 description - 包的描述。 homepage - 包的官网 url 。 author - 包的作者姓名。 contributors - 包的其他贡献者姓名。 dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。 repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。 main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。 keywords - 关键字 卸载模块我们可以使用以下命令来卸载 Node.js 模块。 1$ npm uninstall express 卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看： 1$ npm ls 更新模块我们可以使用以下命令更新模块： 1$ npm update express 搜索模块使用以下来搜索模块： 1$ npm search express 创建模块创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。 12345678910111213141516171819202122232425262728293031$ npm initThis utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults.See `npm help json` for definitive documentation on these fieldsand exactly what they do.Use `npm install &lt;pkg&gt; --save` afterwards to install a package andsave it as a dependency in the package.json file.Press ^C at any time to quit.name: (node_modules) runoob # 模块名version: (1.0.0) description: Node.js 测试模块(www.runoob.com) # 描述entry point: (index.js) test command: make testgit repository: https://github.com/runoob/runoob.git # Github 地址keywords: author: license: (ISC) About to write to ……/node_modules/package.json: # 生成地址{ &quot;name&quot;: &quot;runoob&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;Node.js 测试模块(www.runoob.com)&quot;, ……}Is this ok? (yes) yes 以上的信息，你需要根据你自己的情况输入。在最后输入 “yes” 后会生成 package.json 文件。 接下来我们可以使用以下命令在 npm 资源库中注册用户（使用邮箱注册）： 1234$ npm adduserUsername: mcmohdPassword:Email: (this IS public) mcmohd@gmail.com 接下来我们就用以下命令来发布模块： 1$ npm publish 如果你以上的步骤都操作正确，你就可以跟其他模块一样使用 npm 来安装。 版本号使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。 语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。 如果只是修复bug，需要更新Z位。 如果是新增了功能，但是向下兼容，需要更新Y位。 如果有大变动，向下不兼容，需要更新X位。 版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如”argv”: “0.0.x”表示依赖于0.0.x系列的最新版argv。 NPM支持的所有版本号范围指定方式可以查看官方文档。 NPM 常用命令除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。 除了可以在npmjs.org/doc/查看官方文档外，这里再介绍一些NPM常用命令。 NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。 NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。 使用npm help可查看某条命令的详细帮助，例如npm help install。 在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。 使用npm update可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。 使用npm update -g可以把全局安装的对应命令行程序更新至最新版。 使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。 使用npm unpublish @可以撤销发布自己发布过的某个版本代码。 使用淘宝 NPM 镜像大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。 淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm: 1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 这样就可以使用 cnpm 命令来安装模块了： 1$ cnpm install [name] https://www.runoob.com/nodejs/nodejs-npm.html","link":"/2020/04/26/npm/"}],"tags":[{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"wechat","slug":"wechat","link":"/tags/wechat/"},{"name":"NPM","slug":"NPM","link":"/tags/NPM/"}],"categories":[{"name":"杂项","slug":"杂项","link":"/categories/%E6%9D%82%E9%A1%B9/"},{"name":"文章","slug":"文章","link":"/categories/%E6%96%87%E7%AB%A0/"}]}